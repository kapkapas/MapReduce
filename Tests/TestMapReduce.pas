unit TestMapReduce;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, SysUtils, MapReduce;

type
  // Test methods for class TMapReduce

  TestTMapReduce = class(TTestCase)
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestForEachArrChange;
    procedure TestForEachArrChange1;
    procedure TestForEachArrChange2;
    procedure TestForEachArrChange3;
    procedure TestForEach;
    procedure TestForEach1;
    procedure TestForEach2;
    procedure TestForEach3;
    procedure TestForEach4;
    procedure TestForEach5;
    {
      procedure TestMap;
      procedure TestMap1;
      procedure TestMap2;
      procedure TestMap3;
      procedure TestMap4;
      procedure TestMap5;
      procedure TestFilterToArr;
      procedure TestFilter;
      procedure TestFilter1;
      procedure TestEvery;
      procedure TestEvery1;
      procedure TestEvery2;
      procedure TestSome;
      procedure TestSome1;
      procedure TestSome2;
      procedure TestReduce;
      procedure TestReduce1;
      procedure TestReduce2;
      procedure TestReduce3;
      procedure TestReduce4;
      procedure TestReduce5;
      procedure TestReduce6;
      procedure TestReduce7;
      procedure TestReduce8;
      procedure TestReduce9;
      procedure TestReduce10;
      procedure TestReduce11;
    }
  end;

const
  c_std_arr: array of string = ['1', '22', '333', '4444'];
  c_tarray: TArray<string>   = ['1', '22', '333', '4444'];

implementation

uses System.Generics.Collections;

procedure TestTMapReduce.SetUp;
begin

end;

procedure TestTMapReduce.TearDown;
begin

end;

procedure TestTMapReduce.TestForEachArrChange;
var
  Source: TArray<string>;
begin
  // Setup method call parameters
  Source := [];
  TMapReduce<string>.ForEach(c_std_arr,
    procedure(const X: string)
    begin
      Source := Source + [X];
    end);
  // Testing
  TMapReduce<string>.ForEachArrChange(Source,
    procedure(var X: string; const I: Integer; var Done: Boolean)
    begin
      X := X + '▲';
      Done := False;
    end);
  // Validate method results
  CheckTrue(TMapReduce<string>.Every(Source,
    function(const X: string): Boolean
    begin
      Result := X.EndsWith('▲');
    end));
end;

procedure TestTMapReduce.TestForEachArrChange1;
var
  Source: array of string;
begin
  // Setup method call parameters
  Source := [];
  TMapReduce<string>.ForEach(c_std_arr,
    procedure(const X: string)
    begin
      Source := Source + [X];
    end);
  // Testing
  TMapReduce<string>.ForEachArrChange(Source,
    procedure(var X: string; const I: Integer; var Done: Boolean)
    begin
      X := X + '▲';
      Done := False;
    end);
  // Validate method results
  CheckTrue(TMapReduce<string>.Every(Source,
    function(const X: string): Boolean
    begin
      Result := X.EndsWith('▲');
    end));
end;

procedure TestTMapReduce.TestForEachArrChange2;
var
  Source: TArray<string>;
begin
  // Setup method call parameters
  Source := [];
  TMapReduce<string>.ForEach(c_std_arr,
    procedure(const X: string)
    begin
      Source := Source + [X];
    end);
  // Testing
  TMapReduce<string>.ForEachArrChange(Source,
    procedure(var X: string)
    begin
      X := X + '▲';
    end);
  // Validate method results
  CheckTrue(TMapReduce<string>.Every(Source,
    function(const X: string): Boolean
    begin
      Result := X.EndsWith('▲');
    end));
end;

procedure TestTMapReduce.TestForEachArrChange3;
var
  Source: array of string;
begin
  // Setup method call parameters
  Source := [];
  TMapReduce<string>.ForEach(c_std_arr,
    procedure(const X: string)
    begin
      Source := Source + [X];
    end);
  // Testing
  TMapReduce<string>.ForEachArrChange(Source,
    procedure(var X: string)
    begin
      X := X + '▲';
    end);
  // Validate method results
  CheckTrue(TMapReduce<string>.Every(Source,
    function(const X: string): Boolean
    begin
      Result := X.EndsWith('▲');
    end));
end;

procedure TestTMapReduce.TestForEach;
var
  Source: TList<string>;
  LoopCount: Integer;
begin
  // Setup method call parameters
  Source := TList<string>.Create;
  try
    TMapReduce<string>.ForEach(c_std_arr,
      procedure(const X: string)
      begin
        Source.Add(X);
      end);
    LoopCount := 0;
    // Testing
    TMapReduce<string>.ForEach(Source,
      procedure(const X: string; const I: Integer; var Done: Boolean)
      begin
        if I = high(c_tarray) then
          Done := True
        else
        begin
          Done := False;
          Inc(LoopCount);
        end;
      end);
  finally
    FreeAndNil(Source);
  end;
  // Validate method results
  CheckTrue(LoopCount = Length(c_std_arr) - 1);
end;

procedure TestTMapReduce.TestForEach1;
var
  LoopCount: Integer;
begin
  // Setup method call parameters
  LoopCount := 0;
  // Testing
  TMapReduce<string>.ForEach(c_tarray,
    procedure(const X: string; const I: Integer; var Done: Boolean)
    begin
      if I = high(c_tarray) then
        Done := True
      else
      begin
        Done := False;
        Inc(LoopCount);
      end;
    end);
  // Validate method results
  CheckTrue(LoopCount = Length(c_tarray) - 1);
end;

procedure TestTMapReduce.TestForEach2;
var
  LoopCount: Integer;
begin
  // Setup method call parameters
  LoopCount := 0;
  // Testing
  TMapReduce<string>.ForEach(c_std_arr,
    procedure(const X: string; const I: Integer; var Done: Boolean)
    begin
      if I = high(c_std_arr) then
        Done := True
      else
      begin
        Done := False;
        Inc(LoopCount);
      end;
    end);
  // Validate method results
  CheckTrue(LoopCount = Length(c_std_arr) - 1);
end;

procedure TestTMapReduce.TestForEach3;
var
  Source: TList<string>;
  LoopCount: Integer;
begin
  // Setup method call parameters
  Source := TList<string>.Create;
  try
    TMapReduce<string>.ForEach(c_std_arr,
      procedure(const X: string)
      begin
        Source.Add(X);
      end);
    LoopCount := 0;
    // Testing
    TMapReduce<string>.ForEach(Source,
      procedure(const X: string)
      begin
        Inc(LoopCount);
      end);
  finally
    FreeAndNil(Source);
  end;
  // Validate method results
  CheckTrue(LoopCount = Length(c_std_arr));
end;

procedure TestTMapReduce.TestForEach4;
var
  LoopCount: Integer;
begin
  // Setup method call parameters
  LoopCount := 0;
  // Testing
  TMapReduce<string>.ForEach(c_tarray,
    procedure(const X: string)
    begin
      Inc(LoopCount);
    end);
  // Validate method results
  CheckTrue(LoopCount = Length(c_tarray));
end;

procedure TestTMapReduce.TestForEach5;
var
  LoopCount: Integer;
begin
  // Setup method call parameters
  LoopCount := 0;
  // Testing
  TMapReduce<string>.ForEach(c_std_arr,
    procedure(const X: string)
    begin
      Inc(LoopCount);
    end);
  // Validate method results
  CheckTrue(LoopCount = Length(c_std_arr));
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTMapReduce.Suite);

end.
